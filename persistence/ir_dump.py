"""
Dump IR to dot file (TODO: generated by LLM, to check)
"""
from graphviz import Digraph
from intermediate_representation.translated_expression import *
from intermediate_representation.tree import *


def pretty_print_ir(ir: TranslatedExpression, filename: str):
    dot = Digraph()

    def add_node(node, parent=None):
        node_id = str(id(node))
        label = type(node).__name__
        dot.node(node_id, label)
        if parent:
            dot.edge(str(id(parent)), node_id)

        if isinstance(node, Expression):
            add_node(node.expression, node)
        elif isinstance(node, NoResult):
            add_node(node.statement, node)
        elif isinstance(node, Conditional):
            add_node(node.condition, node)
        elif isinstance(node, tree.Condition):
            add_node(node.statement, node)
            for true_jump in node.trues:
                add_node(true_jump, node)
            for false_jump in node.falses:
                add_node(false_jump, node)
        elif isinstance(node, ConditionalJump):
            add_node(node.left, node)
            add_node(node.right, node)
        elif isinstance(node, EvaluateSequence):
            add_node(node.first, node)
            add_node(node.second, node)
        elif isinstance(node, Move):
            add_node(node.destination, node)
            add_node(node.source, node)
        elif isinstance(node, Temporary):
            dot.node(node_id, f"Temporary({node.temp})")
        elif isinstance(node, Constant):
            dot.node(node_id, f"Constant({node.value})")
        elif isinstance(node, Label):
            dot.node(node_id, f"Label({node.label})")
        elif isinstance(node, StatementExpression):
            add_node(node.statement, node)
        elif isinstance(node, Sequence):
            for stmt in node.statements:
                add_node(stmt, node)

    add_node(ir)
    dot.render(filename, format='dot', cleanup=True)


def pretty_print_canonized_ir(canonized_ir, filename: str):
    dot = Digraph()

    def add_node(node, parent=None):
        node_id = str(id(node))
        label = type(node).__name__
        dot.node(node_id, label)
        if parent:
            dot.edge(str(id(parent)), node_id)

        if isinstance(node, BinaryOperation):
            add_node(node.left, node)
            add_node(node.right, node)
        elif isinstance(node, ConditionalJump):
            add_node(node.left, node)
            add_node(node.right, node)
        elif isinstance(node, EvaluateSequence):
            add_node(node.first, node)
            add_node(node.second, node)
        elif isinstance(node, Move):
            add_node(node.destination, node)
            add_node(node.source, node)
        elif isinstance(node, Temporary):
            dot.node(node_id, f"Temporary({node.temp})")
        elif isinstance(node, Constant):
            dot.node(node_id, f"Constant({node.value})")
        elif isinstance(node, Label):
            dot.node(node_id, f"Label({node.label})")
        elif isinstance(node, Sequence):
            for stmt in node.statements:
                add_node(stmt, node)

    for ir in canonized_ir:
        add_node(ir)
    dot.render(filename, format='dot', cleanup=True)


# Example usage:
# ir = ...  # Your TranslatedExpression instance
# pretty_print_ir(ir, 'output')
