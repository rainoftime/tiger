"""
Dump IR to dot file (TODO: generated by LLM, to check)
"""
# from graphviz import Digraph
from typing import List, Union
from intermediate_representation.translated_expression import *
from intermediate_representation.tree import *


class IRPrinter:
    @staticmethod
    def print_ir(node: Union[Statement, Expression], indent: int = 0) -> None:
        prefix = "  " * indent

        if isinstance(node, Sequence):
            print(f"{prefix}Sequence")
            for stmt in node.sequence:
                IRPrinter.print_ir(stmt, indent + 1)

        elif isinstance(node, Label):
            print(f"{prefix}Label({node.label})")

        elif isinstance(node, Jump):
            print(f"{prefix}Jump")
            IRPrinter.print_ir(node.expression, indent + 1)
            print(f"{prefix}  Labels: {[str(l) for l in node.labels]}")

        elif isinstance(node, ConditionalJump):
            print(f"{prefix}ConditionalJump({node.operator})")
            print(f"{prefix}  Left:")
            IRPrinter.print_ir(node.left, indent + 2)
            print(f"{prefix}  Right:")
            IRPrinter.print_ir(node.right, indent + 2)
            if node.true:
                print(f"{prefix}  True: {node.true}")
            if node.false:
                print(f"{prefix}  False: {node.false}")

        elif isinstance(node, Move):
            print(f"{prefix}Move")
            print(f"{prefix}  Destination:")
            IRPrinter.print_ir(node.temporary, indent + 2)
            print(f"{prefix}  Source:")
            IRPrinter.print_ir(node.expression, indent + 2)

        elif isinstance(node, StatementExpression):
            print(f"{prefix}StatementExpression")
            IRPrinter.print_ir(node.expression, indent + 1)

        elif isinstance(node, BinaryOperation):
            print(f"{prefix}BinaryOperation({node.operator})")
            print(f"{prefix}  Left:")
            IRPrinter.print_ir(node.left, indent + 2)
            print(f"{prefix}  Right:")
            IRPrinter.print_ir(node.right, indent + 2)

        elif isinstance(node, Memory):
            print(f"{prefix}Memory")
            IRPrinter.print_ir(node.expression, indent + 1)

        elif isinstance(node, Temporary):
            print(f"{prefix}Temporary({node.temporary})")

        elif isinstance(node, EvaluateSequence):
            print(f"{prefix}EvaluateSequence")
            print(f"{prefix}  Statement:")
            IRPrinter.print_ir(node.statement, indent + 2)
            print(f"{prefix}  Expression:")
            IRPrinter.print_ir(node.expression, indent + 2)

        elif isinstance(node, Name):
            print(f"{prefix}Name({node.label})")

        elif isinstance(node, Constant):
            print(f"{prefix}Constant({node.value})")

        elif isinstance(node, Call):
            print(f"{prefix}Call")
            print(f"{prefix}  Function:")
            IRPrinter.print_ir(node.function, indent + 2)
            print(f"{prefix}  Arguments:")
            for arg in node.arguments:
                IRPrinter.print_ir(arg, indent + 2)


def print_ir_list(ir_list: List[Union[Statement, Expression]]) -> None:
    print("\nTree IR Structure:")
    print("=" * 50)
    for i, node in enumerate(ir_list):
        print(f"\nFragment {i + 1}:")
        print("-" * 20)
        IRPrinter.print_ir(node)
    print("=" * 50)


def print_canonized_ir(canonized_bodies):
    print("\nCanonized IR Structure:")
    print("=" * 50)
    for i, body in enumerate(canonized_bodies):
        print(f"\nFragment {i + 1}:")
        print("-" * 20)
        for j, stmt in enumerate(body):
            print(f"Statement {j + 1}:")
            IRPrinter.print_ir(stmt, indent=2)  # Changed from print_ir to IRPrinter.print_ir
        print("-" * 20)
    print("=" * 50)